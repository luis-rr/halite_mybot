import numpy as np
from numpy.testing import assert_array_equal
import hlt


def test_get_frame_0():
    size_string = '4 4 '

    map_string = ('2 0 '
                  '1 2 '
                  '6 0 '
                  '1 1 '
                  '6 0 '
                  '69 94 142 82 '
                  '35 56 216 169 '
                  '82 142 94 69 '
                  '169 216 56 35 ')

    expected_owner = [[0, 0, 2, 0],
                      [0, 0, 0, 0],
                      [0, 1, 0, 0],
                      [0, 0, 0, 0]]

    expected_strength = [[69, 94, 142, 82],
                         [35, 56, 216, 169],
                         [82, 142, 94, 69],
                         [169, 216, 56, 35]]

    production_string = ('8 8 5 9 '
                         '7 4 5 5 '
                         '9 5 8 8 '
                         '5 5 4 7 ')

    expected_production = [[8, 8, 5, 9],
                           [7, 4, 5, 5],
                           [9, 5, 8, 8],
                           [5, 5, 4, 7]]

    gm = hlt.NumpyGameMap(size_string, production_string, map_string)

    assert_array_equal(gm.owners, np.array(expected_owner))
    assert_array_equal(gm.strength, np.array(expected_strength))
    assert_array_equal(gm.production, np.array(expected_production))


def test_get_frame_1():
    size_string = '16 16 '
    production_string = '5 5 4 6 7 6 5 5 6 5 3 3 1 1 1 2 4 4 4 5 8 8 6 6 6 4 3 3 2 1 1 2 3 3 4 3 5 5 4 4 4 3 3 3 1 1 1 1 3 4 4 3 4 4 3 3 3 2 3 3 1 1 1 2 4 5 5 4 3 4 3 3 2 2 2 2 2 2 2 3 6 7 6 4 4 4 4 3 2 2 2 1 2 2 3 4 6 7 7 7 6 5 4 4 3 3 2 2 2 2 2 3 4 5 6 7 6 5 3 4 3 2 2 2 2 1 1 2 4 5 6 7 6 5 3 4 3 2 2 2 2 1 1 2 6 7 7 7 6 5 4 4 3 3 2 2 2 2 2 3 6 7 6 4 4 4 4 3 2 2 2 1 2 2 3 4 4 5 5 4 3 4 3 3 2 2 2 2 2 2 2 3 3 4 4 3 4 4 3 3 3 2 3 3 1 1 1 2 3 3 4 3 5 5 4 4 4 3 3 3 1 1 1 1 4 4 4 5 8 8 6 6 6 4 3 3 2 1 1 2 5 5 4 6 7 6 5 5 6 5 3 3 1 1 1 2 '
    map_string = '72 0 1 1 111 0 1 2 71 0 106 115 155 141 67 36 34 50 56 62 49 49 50 38 29 54 80 108 139 112 56 43 35 39 41 45 36 41 51 42 35 50 49 72 95 72 46 50 43 42 37 43 35 37 45 33 26 31 65 78 78 54 38 41 47 42 44 54 40 40 31 25 24 32 99 102 78 62 52 49 61 58 67 73 56 60 32 23 24 42 93 93 79 85 73 58 54 49 60 58 46 48 25 23 27 44 42 42 39 48 45 40 40 41 62 55 39 36 17 12 15 23 24 29 27 32 29 26 32 34 52 40 30 35 16 8 8 14 24 29 27 32 29 26 32 34 52 40 30 35 16 8 8 14 42 42 39 48 45 40 40 41 62 55 39 36 17 12 15 23 93 93 79 85 73 58 54 49 60 58 46 48 25 23 27 44 99 102 78 62 52 49 61 58 67 73 56 60 32 23 24 42 65 78 78 54 38 41 47 42 44 54 40 40 31 25 24 32 49 72 95 72 46 50 43 42 37 43 35 37 45 33 26 31 80 108 139 112 56 43 35 39 41 45 36 41 51 42 35 50 106 115 155 141 67 36 34 50 56 62 49 49 50 38 29 54 '
    expected_owner = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    expected_strength = [[106, 115, 155, 141, 67, 36, 34, 50, 56, 62, 49, 49, 50, 38, 29, 54], [80, 108, 139, 112, 56, 43, 35, 39, 41, 45, 36, 41, 51, 42, 35, 50], [49, 72, 95, 72, 46, 50, 43, 42, 37, 43, 35, 37, 45, 33, 26, 31], [65, 78, 78, 54, 38, 41, 47, 42, 44, 54, 40, 40, 31, 25, 24, 32], [99, 102, 78, 62, 52, 49, 61, 58, 67, 73, 56, 60, 32, 23, 24, 42], [93, 93, 79, 85, 73, 58, 54, 49, 60, 58, 46, 48, 25, 23, 27, 44], [42, 42, 39, 48, 45, 40, 40, 41, 62, 55, 39, 36, 17, 12, 15, 23], [24, 29, 27, 32, 29, 26, 32, 34, 52, 40, 30, 35, 16, 8, 8, 14], [24, 29, 27, 32, 29, 26, 32, 34, 52, 40, 30, 35, 16, 8, 8, 14], [42, 42, 39, 48, 45, 40, 40, 41, 62, 55, 39, 36, 17, 12, 15, 23], [93, 93, 79, 85, 73, 58, 54, 49, 60, 58, 46, 48, 25, 23, 27, 44], [99, 102, 78, 62, 52, 49, 61, 58, 67, 73, 56, 60, 32, 23, 24, 42], [65, 78, 78, 54, 38, 41, 47, 42, 44, 54, 40, 40, 31, 25, 24, 32], [49, 72, 95, 72, 46, 50, 43, 42, 37, 43, 35, 37, 45, 33, 26, 31], [80, 108, 139, 112, 56, 43, 35, 39, 41, 45, 36, 41, 51, 42, 35, 50], [106, 115, 155, 141, 67, 36, 34, 50, 56, 62, 49, 49, 50, 38, 29, 54]]
    expected_production = [[5, 5, 4, 6, 7, 6, 5, 5, 6, 5, 3, 3, 1, 1, 1, 2], [4, 4, 4, 5, 8, 8, 6, 6, 6, 4, 3, 3, 2, 1, 1, 2], [3, 3, 4, 3, 5, 5, 4, 4, 4, 3, 3, 3, 1, 1, 1, 1], [3, 4, 4, 3, 4, 4, 3, 3, 3, 2, 3, 3, 1, 1, 1, 2], [4, 5, 5, 4, 3, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3], [6, 7, 6, 4, 4, 4, 4, 3, 2, 2, 2, 1, 2, 2, 3, 4], [6, 7, 7, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 2, 2, 3], [4, 5, 6, 7, 6, 5, 3, 4, 3, 2, 2, 2, 2, 1, 1, 2], [4, 5, 6, 7, 6, 5, 3, 4, 3, 2, 2, 2, 2, 1, 1, 2], [6, 7, 7, 7, 6, 5, 4, 4, 3, 3, 2, 2, 2, 2, 2, 3], [6, 7, 6, 4, 4, 4, 4, 3, 2, 2, 2, 1, 2, 2, 3, 4], [4, 5, 5, 4, 3, 4, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3], [3, 4, 4, 3, 4, 4, 3, 3, 3, 2, 3, 3, 1, 1, 1, 2], [3, 3, 4, 3, 5, 5, 4, 4, 4, 3, 3, 3, 1, 1, 1, 1], [4, 4, 4, 5, 8, 8, 6, 6, 6, 4, 3, 3, 2, 1, 1, 2], [5, 5, 4, 6, 7, 6, 5, 5, 6, 5, 3, 3, 1, 1, 1, 2]]

    gm = hlt.NumpyGameMap(size_string, production_string, map_string)

    assert_array_equal(gm.owners, np.array(expected_owner))
    assert_array_equal(gm.strength, np.array(expected_strength))
    assert_array_equal(gm.production, np.array(expected_production))


def test_get_frame_2():
    size_string = '4 8 '
    production_string = '8 10 8 9 7 9 5 4 10 10 8 7 11 9 9 9 11 9 9 9 10 10 8 7 7 9 5 4 8 10 8 9 '
    map_string = '10 0 1 1 11 0 1 2 9 0 238 231 181 222 156 101 104 150 94 63 98 99 69 93 119 65 69 93 119 65 94 63 98 99 156 101 104 150 238 231 181 222 '
    expected_owner = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, 0], [0, 0, 0, 0],
                      [0, 0, 0, 0]]
    expected_strength = [[238, 231, 181, 222], [156, 101, 104, 150], [94, 63, 98, 99], [69, 93, 119, 65],
                         [69, 93, 119, 65], [94, 63, 98, 99], [156, 101, 104, 150], [238, 231, 181, 222]]
    expected_production = [[8, 10, 8, 9], [7, 9, 5, 4], [10, 10, 8, 7], [11, 9, 9, 9], [11, 9, 9, 9], [10, 10, 8, 7],
                           [7, 9, 5, 4], [8, 10, 8, 9]]

    gm = hlt.NumpyGameMap(size_string, production_string, map_string)

    assert_array_equal(gm.owners, np.array(expected_owner))
    assert_array_equal(gm.strength, np.array(expected_strength))
    assert_array_equal(gm.production, np.array(expected_production))


def test_get_frame_3():
    size_string = '4 8 '
    production_string = '1 1 1 1 2 1 1 2 2 2 2 2 5 3 3 5 2 3 3 2 1 5 5 1 2 9 9 2 1 5 5 1 '

    expected_owner = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0],
                      [0, 0, 0, 0]]
    expected_strength = [[49, 146, 146, 49], [65, 157, 157, 65], [65, 90, 90, 65], [54, 43, 43, 54], [34, 42, 42, 34],
                         [33, 54, 54, 33], [60, 81, 81, 60], [32, 67, 67, 32]]
    expected_production = [[1, 1, 1, 1], [2, 1, 1, 2], [2, 2, 2, 2], [5, 3, 3, 5], [2, 3, 3, 2], [1, 5, 5, 1],
                           [2, 9, 9, 2], [1, 5, 5, 1]]
    map_string = '17 0 1 1 1 2 13 0 49 146 146 49 65 157 157 65 65 90 90 65 54 43 43 54 34 42 42 34 33 54 54 33 60 81 81 60 32 67 67 32 '
    gm = hlt.NumpyGameMap(size_string, production_string, map_string)

    assert_array_equal(gm.owners, np.array(expected_owner))
    assert_array_equal(gm.strength, np.array(expected_strength))
    assert_array_equal(gm.production, np.array(expected_production))
